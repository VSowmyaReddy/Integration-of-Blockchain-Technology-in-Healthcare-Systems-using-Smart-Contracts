import hashlib 
import time 
class Block: 
    def __init__(self, index, data, previous_hash): 
        self.index = index 
        self.timestamp = time.time() 
        self.data = data 
        self.previous_hash = str(previous_hash) 
        self.nonce = 0 
        self.hash = self.calculate_hash() 
 
    def calculate_hash(self): 
        content = f"{self.index}{self.timestamp}{self.data}{self.previous_hash}{self.nonce}" 
        return hashlib.sha256(content.encode()).hexdigest() 
 
    def mine_block(self, difficulty): 
        target = "0" * difficulty 
        while not self.hash.startswith(target): 
            self.nonce += 1 
            self.hash = self.calculate_hash() 
 
class Blockchain: 
    def __init__(self): 
        self.chain = [self.create_genesis_block()] 
        self.difficulty = 4 
 
    def create_genesis_block(self): 
        return Block(0, "Genesis Block", "0") 
 
    def get_latest_block(self): 
        return self.chain[-1] 
 
    def add_block(self, new_block): 
        new_block.previous_hash = self.get_latest_block().hash 
        new_block.mine_block(self.difficulty) 
        self.chain.append(new_block) 
 
    def is_chain_valid(self): 
        for i in range(1, len(self.chain)): 
            current_block = self.chain[i] 
            previous_block = self.chain[i - 1] 
            if current_block.hash != current_block.calculate_hash() or \ 
               current_block.previous_hash != previous_block.hash: 
                return False 
        return True 
 
class HealthcareBlockchain(Blockchain): 
    def __init__(self): 
        super().__init__() 
        self.patient_data = {} 
 
    def add_patient_record(self, patient_id, record): 
        if patient_id not in self.patient_data: 
            self.patient_data[patient_id] = [] 
        self.patient_data[patient_id].append(record) 
 
        data = {"patient_id": patient_id, "record": record} 
        new_block = Block(len(self.chain), data, self.get_latest_block().hash) 
        self.add_block(new_block) 
 
    def get_patient_records(self, patient_id): 
        return self.patient_data.get(patient_id, []) 
 
 
from flask import Flask, render_template, request, jsonify 
from blockchain import HealthcareBlockchain 
 
app = Flask(__name__) 
blockchain = HealthcareBlockchain() 
 
# Store Patient IDs to check uniqueness 
patient_ids = set() 
 
@app.route('/') 
def home(): 
    return render_template('index.html') 
 
@app.route('/add_record', methods=['GET', 'POST']) 
def add_record(): 
    if request.method == 'POST': 
  
        # Gather patient details 
        patient_id = request.form['patient_id'] 
        name = request.form['name'] 
        gender = request.form['gender'] 
        age = request.form['age'] 
        treatment_details = request.form['treatment_details'] 
        bill = request.form['bill'] 
 
        if patient_id in patient_ids: 
            return render_template('add_record.html', error="Patient ID already exists!             
  Please use a unique ID.") 
 
        # Add record to blockchain 
        record = { 
            "Patient ID": patient_id, 
            "Name": name, 
            "Gender": gender, 
            "Age": age, 
            "Treatment Details": treatment_details, 
            "Bill": bill 
        } 
        blockchain.add_patient_record(patient_id, record) 
        patient_ids.add(patient_id) 
        return render_template('add_record.html', message="Record added successfully!") 
 
    return render_template('add_record.html') 
 
@app.route('/view_record', methods=['GET', 'POST']) 
def view_record(): 
    records = [] 
    patient_id = None 
    if request.method == 'POST': 
        patient_id = request.form['patient_id'] 
        records = blockchain.get_patient_records(patient_id) 
        if not records: 
            return render_template('view_record.html', error=f"No records found for Patient  
 ID: {patient_id}") 
     
    return render_template('view_record.html', records=records, patient_id=patient_id) 
 
@app.route('/blockchain') 
def blockchain_view(): 
    return render_template('blockchain.html', blockchain=blockchain.chain) 

@app.route('/api/blockchain', methods=['GET']) 
def get_blockchain(): 
chain_data = [ 
{"index": block.index, "data": block.data, "hash": block.hash, "previous_hash":  
block.previous_hash} 
for block in blockchain.chain 
] 
return jsonify(chain_data) 
if __name__ == '__main__': 
app.run(debug=True) 
